openapi: 3.1.0
info:
  title: My Todo API
  version: 1.0.0
tags:
  - name: user
    description: User operations
  - name: todos
    description: Todos operations
components:
  schemas:
    UserScalarFieldEnum:
      type: string
      enum:
        - id
        - name
        - password
    TodosScalarFieldEnum:
      type: string
      enum:
        - id
        - name
        - completed
        - createAt
        - userId
    SortOrder:
      type: string
      enum:
        - asc
        - desc
    QueryMode:
      type: string
      enum:
        - default
        - insensitive
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
        todo:
          type: array
          items:
            $ref: "#/components/schemas/Todos"
      required:
        - id
        - name
        - password
    Todos:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        completed:
          type: boolean
        createAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
        userId:
          type: string
      required:
        - id
        - name
        - completed
        - createAt
        - user
        - userId
    UserWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/UserWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/UserWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/UserWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/UserWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/UserWhereInput"
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        password:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        todo:
          $ref: "#/components/schemas/TodosListRelationFilter"
    UserOrderByWithRelationInput:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SortOrder"
        name:
          $ref: "#/components/schemas/SortOrder"
        password:
          $ref: "#/components/schemas/SortOrder"
        todo:
          $ref: "#/components/schemas/TodosOrderByRelationAggregateInput"
    UserWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/UserWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/UserWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/UserWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/UserWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/UserWhereInput"
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        password:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        todo:
          $ref: "#/components/schemas/TodosListRelationFilter"
    UserScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/UserScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/UserScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/UserScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/UserScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/UserScalarWhereWithAggregatesInput"
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        password:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
    TodosWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/TodosWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereInput"
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        completed:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        createAt:
          oneOf:
            - $ref: "#/components/schemas/DateTimeFilter"
            - type: string
              format: date-time
        userId:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        user:
          oneOf:
            - $ref: "#/components/schemas/UserScalarRelationFilter"
            - $ref: "#/components/schemas/UserWhereInput"
    TodosOrderByWithRelationInput:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SortOrder"
        name:
          $ref: "#/components/schemas/SortOrder"
        completed:
          $ref: "#/components/schemas/SortOrder"
        createAt:
          $ref: "#/components/schemas/SortOrder"
        userId:
          $ref: "#/components/schemas/SortOrder"
        user:
          $ref: "#/components/schemas/UserOrderByWithRelationInput"
    TodosWhereUniqueInput:
      type: object
      properties:
        id:
          type: string
        AND:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/TodosWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereInput"
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        completed:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        createAt:
          oneOf:
            - $ref: "#/components/schemas/DateTimeFilter"
            - type: string
              format: date-time
        userId:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        user:
          oneOf:
            - $ref: "#/components/schemas/UserScalarRelationFilter"
            - $ref: "#/components/schemas/UserWhereInput"
    TodosScalarWhereWithAggregatesInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/TodosScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosScalarWhereWithAggregatesInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/TodosScalarWhereWithAggregatesInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/TodosScalarWhereWithAggregatesInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosScalarWhereWithAggregatesInput"
        id:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
        completed:
          oneOf:
            - $ref: "#/components/schemas/BoolWithAggregatesFilter"
            - type: boolean
        createAt:
          oneOf:
            - $ref: "#/components/schemas/DateTimeWithAggregatesFilter"
            - type: string
              format: date-time
        userId:
          oneOf:
            - $ref: "#/components/schemas/StringWithAggregatesFilter"
            - type: string
    UserCreateInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
        todo:
          $ref: "#/components/schemas/TodosCreateNestedManyWithoutUserInput"
      required:
        - id
        - name
        - password
    UserUpdateInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        password:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        todo:
          $ref: "#/components/schemas/TodosUpdateManyWithoutUserNestedInput"
    UserCreateManyInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
      required:
        - id
        - name
        - password
    UserUpdateManyMutationInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        password:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    TodosCreateInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        completed:
          type: boolean
        createAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/UserCreateNestedOneWithoutTodoInput"
      required:
        - name
    TodosUpdateInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        completed:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        createAt:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/DateTimeFieldUpdateOperationsInput"
        user:
          $ref: "#/components/schemas/UserUpdateOneRequiredWithoutTodoNestedInput"
    TodosCreateManyInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        completed:
          type: boolean
        createAt:
          type: string
          format: date-time
        userId:
          type: string
      required:
        - name
    TodosUpdateManyMutationInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        completed:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        createAt:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/DateTimeFieldUpdateOperationsInput"
    StringFilter:
      type: object
      properties:
        equals:
          type: string
        in:
          type: array
          items:
            type: string
        notIn:
          type: array
          items:
            type: string
        lt:
          type: string
        lte:
          type: string
        gt:
          type: string
        gte:
          type: string
        contains:
          type: string
        startsWith:
          type: string
        endsWith:
          type: string
        mode:
          $ref: "#/components/schemas/QueryMode"
        not:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/NestedStringFilter"
    TodosListRelationFilter:
      type: object
      properties:
        every:
          $ref: "#/components/schemas/TodosWhereInput"
        some:
          $ref: "#/components/schemas/TodosWhereInput"
        none:
          $ref: "#/components/schemas/TodosWhereInput"
    TodosOrderByRelationAggregateInput:
      type: object
      properties:
        _count:
          $ref: "#/components/schemas/SortOrder"
    StringWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: string
        in:
          type: array
          items:
            type: string
        notIn:
          type: array
          items:
            type: string
        lt:
          type: string
        lte:
          type: string
        gt:
          type: string
        gte:
          type: string
        contains:
          type: string
        startsWith:
          type: string
        endsWith:
          type: string
        mode:
          $ref: "#/components/schemas/QueryMode"
        not:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/NestedStringWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedStringFilter"
        _max:
          $ref: "#/components/schemas/NestedStringFilter"
    BoolFilter:
      type: object
      properties:
        equals:
          type: boolean
        not:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/NestedBoolFilter"
    DateTimeFilter:
      type: object
      properties:
        equals:
          type: string
          format: date-time
        in:
          type: array
          items:
            type: string
            format: date-time
        notIn:
          type: array
          items:
            type: string
            format: date-time
        lt:
          type: string
          format: date-time
        lte:
          type: string
          format: date-time
        gt:
          type: string
          format: date-time
        gte:
          type: string
          format: date-time
        not:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/NestedDateTimeFilter"
    UserScalarRelationFilter:
      type: object
      properties:
        is:
          $ref: "#/components/schemas/UserWhereInput"
        isNot:
          $ref: "#/components/schemas/UserWhereInput"
    BoolWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: boolean
        not:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/NestedBoolWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedBoolFilter"
        _max:
          $ref: "#/components/schemas/NestedBoolFilter"
    DateTimeWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: string
          format: date-time
        in:
          type: array
          items:
            type: string
            format: date-time
        notIn:
          type: array
          items:
            type: string
            format: date-time
        lt:
          type: string
          format: date-time
        lte:
          type: string
          format: date-time
        gt:
          type: string
          format: date-time
        gte:
          type: string
          format: date-time
        not:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/NestedDateTimeWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedDateTimeFilter"
        _max:
          $ref: "#/components/schemas/NestedDateTimeFilter"
    TodosCreateNestedManyWithoutUserInput:
      type: object
      properties:
        create:
          oneOf:
            - $ref: "#/components/schemas/TodosCreateWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosCreateWithoutUserInput"
            - $ref: "#/components/schemas/TodosUncheckedCreateWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosUncheckedCreateWithoutUserInput"
        connectOrCreate:
          oneOf:
            - $ref: "#/components/schemas/TodosCreateOrConnectWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosCreateOrConnectWithoutUserInput"
        createMany:
          $ref: "#/components/schemas/TodosCreateManyUserInputEnvelope"
        connect:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereUniqueInput"
    StringFieldUpdateOperationsInput:
      type: object
      properties:
        set:
          type: string
    TodosUpdateManyWithoutUserNestedInput:
      type: object
      properties:
        create:
          oneOf:
            - $ref: "#/components/schemas/TodosCreateWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosCreateWithoutUserInput"
            - $ref: "#/components/schemas/TodosUncheckedCreateWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosUncheckedCreateWithoutUserInput"
        connectOrCreate:
          oneOf:
            - $ref: "#/components/schemas/TodosCreateOrConnectWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosCreateOrConnectWithoutUserInput"
        upsert:
          oneOf:
            - $ref: "#/components/schemas/TodosUpsertWithWhereUniqueWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosUpsertWithWhereUniqueWithoutUserInput"
        createMany:
          $ref: "#/components/schemas/TodosCreateManyUserInputEnvelope"
        set:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereUniqueInput"
        disconnect:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereUniqueInput"
        delete:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereUniqueInput"
        connect:
          oneOf:
            - $ref: "#/components/schemas/TodosWhereUniqueInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosWhereUniqueInput"
        update:
          oneOf:
            - $ref: "#/components/schemas/TodosUpdateWithWhereUniqueWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosUpdateWithWhereUniqueWithoutUserInput"
        updateMany:
          oneOf:
            - $ref: "#/components/schemas/TodosUpdateManyWithWhereWithoutUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosUpdateManyWithWhereWithoutUserInput"
        deleteMany:
          oneOf:
            - $ref: "#/components/schemas/TodosScalarWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosScalarWhereInput"
    UserCreateNestedOneWithoutTodoInput:
      type: object
      properties:
        create:
          oneOf:
            - $ref: "#/components/schemas/UserCreateWithoutTodoInput"
            - $ref: "#/components/schemas/UserUncheckedCreateWithoutTodoInput"
        connectOrCreate:
          $ref: "#/components/schemas/UserCreateOrConnectWithoutTodoInput"
        connect:
          $ref: "#/components/schemas/UserWhereUniqueInput"
    BoolFieldUpdateOperationsInput:
      type: object
      properties:
        set:
          type: boolean
    DateTimeFieldUpdateOperationsInput:
      type: object
      properties:
        set:
          type: string
          format: date-time
    UserUpdateOneRequiredWithoutTodoNestedInput:
      type: object
      properties:
        create:
          oneOf:
            - $ref: "#/components/schemas/UserCreateWithoutTodoInput"
            - $ref: "#/components/schemas/UserUncheckedCreateWithoutTodoInput"
        connectOrCreate:
          $ref: "#/components/schemas/UserCreateOrConnectWithoutTodoInput"
        upsert:
          $ref: "#/components/schemas/UserUpsertWithoutTodoInput"
        connect:
          $ref: "#/components/schemas/UserWhereUniqueInput"
        update:
          oneOf:
            - $ref: "#/components/schemas/UserUpdateToOneWithWhereWithoutTodoInput"
            - $ref: "#/components/schemas/UserUpdateWithoutTodoInput"
            - $ref: "#/components/schemas/UserUncheckedUpdateWithoutTodoInput"
    NestedStringFilter:
      type: object
      properties:
        equals:
          type: string
        in:
          type: array
          items:
            type: string
        notIn:
          type: array
          items:
            type: string
        lt:
          type: string
        lte:
          type: string
        gt:
          type: string
        gte:
          type: string
        contains:
          type: string
        startsWith:
          type: string
        endsWith:
          type: string
        not:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/NestedStringFilter"
    NestedStringWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: string
        in:
          type: array
          items:
            type: string
        notIn:
          type: array
          items:
            type: string
        lt:
          type: string
        lte:
          type: string
        gt:
          type: string
        gte:
          type: string
        contains:
          type: string
        startsWith:
          type: string
        endsWith:
          type: string
        not:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/NestedStringWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedStringFilter"
        _max:
          $ref: "#/components/schemas/NestedStringFilter"
    NestedIntFilter:
      type: object
      properties:
        equals:
          type: integer
        in:
          type: array
          items:
            type: integer
        notIn:
          type: array
          items:
            type: integer
        lt:
          type: integer
        lte:
          type: integer
        gt:
          type: integer
        gte:
          type: integer
        not:
          oneOf:
            - type: integer
            - $ref: "#/components/schemas/NestedIntFilter"
    NestedBoolFilter:
      type: object
      properties:
        equals:
          type: boolean
        not:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/NestedBoolFilter"
    NestedDateTimeFilter:
      type: object
      properties:
        equals:
          type: string
          format: date-time
        in:
          type: array
          items:
            type: string
            format: date-time
        notIn:
          type: array
          items:
            type: string
            format: date-time
        lt:
          type: string
          format: date-time
        lte:
          type: string
          format: date-time
        gt:
          type: string
          format: date-time
        gte:
          type: string
          format: date-time
        not:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/NestedDateTimeFilter"
    NestedBoolWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: boolean
        not:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/NestedBoolWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedBoolFilter"
        _max:
          $ref: "#/components/schemas/NestedBoolFilter"
    NestedDateTimeWithAggregatesFilter:
      type: object
      properties:
        equals:
          type: string
          format: date-time
        in:
          type: array
          items:
            type: string
            format: date-time
        notIn:
          type: array
          items:
            type: string
            format: date-time
        lt:
          type: string
          format: date-time
        lte:
          type: string
          format: date-time
        gt:
          type: string
          format: date-time
        gte:
          type: string
          format: date-time
        not:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/NestedDateTimeWithAggregatesFilter"
        _count:
          $ref: "#/components/schemas/NestedIntFilter"
        _min:
          $ref: "#/components/schemas/NestedDateTimeFilter"
        _max:
          $ref: "#/components/schemas/NestedDateTimeFilter"
    TodosCreateWithoutUserInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        completed:
          type: boolean
        createAt:
          type: string
          format: date-time
      required:
        - name
    TodosUncheckedCreateWithoutUserInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        completed:
          type: boolean
        createAt:
          type: string
          format: date-time
      required:
        - name
    TodosCreateOrConnectWithoutUserInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TodosWhereUniqueInput"
        create:
          oneOf:
            - $ref: "#/components/schemas/TodosCreateWithoutUserInput"
            - $ref: "#/components/schemas/TodosUncheckedCreateWithoutUserInput"
      required:
        - where
        - create
    TodosCreateManyUserInputEnvelope:
      type: object
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/TodosCreateManyUserInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosCreateManyUserInput"
        skipDuplicates:
          type: boolean
      required:
        - data
    TodosUpsertWithWhereUniqueWithoutUserInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TodosWhereUniqueInput"
        update:
          oneOf:
            - $ref: "#/components/schemas/TodosUpdateWithoutUserInput"
            - $ref: "#/components/schemas/TodosUncheckedUpdateWithoutUserInput"
        create:
          oneOf:
            - $ref: "#/components/schemas/TodosCreateWithoutUserInput"
            - $ref: "#/components/schemas/TodosUncheckedCreateWithoutUserInput"
      required:
        - where
        - update
        - create
    TodosUpdateWithWhereUniqueWithoutUserInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TodosWhereUniqueInput"
        data:
          oneOf:
            - $ref: "#/components/schemas/TodosUpdateWithoutUserInput"
            - $ref: "#/components/schemas/TodosUncheckedUpdateWithoutUserInput"
      required:
        - where
        - data
    TodosUpdateManyWithWhereWithoutUserInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TodosScalarWhereInput"
        data:
          oneOf:
            - $ref: "#/components/schemas/TodosUpdateManyMutationInput"
            - $ref: "#/components/schemas/TodosUncheckedUpdateManyWithoutUserInput"
      required:
        - where
        - data
    TodosScalarWhereInput:
      type: object
      properties:
        AND:
          oneOf:
            - $ref: "#/components/schemas/TodosScalarWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosScalarWhereInput"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/TodosScalarWhereInput"
        NOT:
          oneOf:
            - $ref: "#/components/schemas/TodosScalarWhereInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosScalarWhereInput"
        id:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        name:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
        completed:
          oneOf:
            - $ref: "#/components/schemas/BoolFilter"
            - type: boolean
        createAt:
          oneOf:
            - $ref: "#/components/schemas/DateTimeFilter"
            - type: string
              format: date-time
        userId:
          oneOf:
            - $ref: "#/components/schemas/StringFilter"
            - type: string
    UserCreateWithoutTodoInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
      required:
        - id
        - name
        - password
    UserUncheckedCreateWithoutTodoInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
      required:
        - id
        - name
        - password
    UserCreateOrConnectWithoutTodoInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UserWhereUniqueInput"
        create:
          oneOf:
            - $ref: "#/components/schemas/UserCreateWithoutTodoInput"
            - $ref: "#/components/schemas/UserUncheckedCreateWithoutTodoInput"
      required:
        - where
        - create
    UserUpsertWithoutTodoInput:
      type: object
      properties:
        update:
          oneOf:
            - $ref: "#/components/schemas/UserUpdateWithoutTodoInput"
            - $ref: "#/components/schemas/UserUncheckedUpdateWithoutTodoInput"
        create:
          oneOf:
            - $ref: "#/components/schemas/UserCreateWithoutTodoInput"
            - $ref: "#/components/schemas/UserUncheckedCreateWithoutTodoInput"
        where:
          $ref: "#/components/schemas/UserWhereInput"
      required:
        - update
        - create
    UserUpdateToOneWithWhereWithoutTodoInput:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UserWhereInput"
        data:
          oneOf:
            - $ref: "#/components/schemas/UserUpdateWithoutTodoInput"
            - $ref: "#/components/schemas/UserUncheckedUpdateWithoutTodoInput"
      required:
        - data
    UserUpdateWithoutTodoInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        password:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    UserUncheckedUpdateWithoutTodoInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        password:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
    TodosCreateManyUserInput:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        completed:
          type: boolean
        createAt:
          type: string
          format: date-time
      required:
        - name
    TodosUpdateWithoutUserInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        completed:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        createAt:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/DateTimeFieldUpdateOperationsInput"
    TodosUncheckedUpdateWithoutUserInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        completed:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        createAt:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/DateTimeFieldUpdateOperationsInput"
    TodosUncheckedUpdateManyWithoutUserInput:
      type: object
      properties:
        id:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        name:
          oneOf:
            - type: string
            - $ref: "#/components/schemas/StringFieldUpdateOperationsInput"
        completed:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/BoolFieldUpdateOperationsInput"
        createAt:
          oneOf:
            - type: string
              format: date-time
            - $ref: "#/components/schemas/DateTimeFieldUpdateOperationsInput"
    UserDefaultArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        include:
          $ref: "#/components/schemas/UserInclude"
    UserInclude:
      type: object
      properties:
        todo:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/TodosFindManyArgs"
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UserCountOutputTypeDefaultArgs"
    TodosInclude:
      type: object
      properties:
        user:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UserDefaultArgs"
    UserCountOutputTypeSelect:
      type: object
      properties:
        todo:
          type: boolean
    UserCountOutputTypeDefaultArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UserCountOutputTypeSelect"
    UserSelect:
      type: object
      properties:
        id:
          type: boolean
        name:
          type: boolean
        password:
          type: boolean
        todo:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/TodosFindManyArgs"
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UserCountOutputTypeDefaultArgs"
    TodosSelect:
      type: object
      properties:
        id:
          type: boolean
        name:
          type: boolean
        completed:
          type: boolean
        createAt:
          type: boolean
        user:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UserDefaultArgs"
        userId:
          type: boolean
    UserCountAggregateInput:
      type: object
      properties:
        id:
          type: boolean
        name:
          type: boolean
        password:
          type: boolean
        _all:
          type: boolean
    UserMinAggregateInput:
      type: object
      properties:
        id:
          type: boolean
        name:
          type: boolean
        password:
          type: boolean
    UserMaxAggregateInput:
      type: object
      properties:
        id:
          type: boolean
        name:
          type: boolean
        password:
          type: boolean
    TodosCountAggregateInput:
      type: object
      properties:
        id:
          type: boolean
        name:
          type: boolean
        completed:
          type: boolean
        createAt:
          type: boolean
        userId:
          type: boolean
        _all:
          type: boolean
    TodosMinAggregateInput:
      type: object
      properties:
        id:
          type: boolean
        name:
          type: boolean
        completed:
          type: boolean
        createAt:
          type: boolean
        userId:
          type: boolean
    TodosMaxAggregateInput:
      type: object
      properties:
        id:
          type: boolean
        name:
          type: boolean
        completed:
          type: boolean
        createAt:
          type: boolean
        userId:
          type: boolean
    AggregateUser:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserMaxAggregateOutputType"
    UserGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        password:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/UserMaxAggregateOutputType"
      required:
        - id
        - name
        - password
    AggregateTodos:
      type: object
      properties:
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TodosCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TodosMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TodosMaxAggregateOutputType"
    TodosGroupByOutputType:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        completed:
          type: boolean
        createAt:
          type: string
          format: date-time
        userId:
          type: string
        _count:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TodosCountAggregateOutputType"
        _min:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TodosMinAggregateOutputType"
        _max:
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/TodosMaxAggregateOutputType"
      required:
        - id
        - name
        - completed
        - createAt
        - userId
    UserCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: integer
        password:
          type: integer
        _all:
          type: integer
      required:
        - id
        - name
        - password
        - _all
    UserMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        password:
          oneOf:
            - type: "null"
            - type: string
    UserMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        password:
          oneOf:
            - type: "null"
            - type: string
    TodosCountAggregateOutputType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: integer
        completed:
          type: integer
        createAt:
          type: integer
        userId:
          type: integer
        _all:
          type: integer
      required:
        - id
        - name
        - completed
        - createAt
        - userId
        - _all
    TodosMinAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        completed:
          oneOf:
            - type: "null"
            - type: boolean
        createAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        userId:
          oneOf:
            - type: "null"
            - type: string
    TodosMaxAggregateOutputType:
      type: object
      properties:
        id:
          oneOf:
            - type: "null"
            - type: string
        name:
          oneOf:
            - type: "null"
            - type: string
        completed:
          oneOf:
            - type: "null"
            - type: boolean
        createAt:
          oneOf:
            - type: "null"
            - type: string
              format: date-time
        userId:
          oneOf:
            - type: "null"
            - type: string
    _Meta:
      type: object
      description: Meta information about the request or response
      properties:
        serialization:
          description: Serialization metadata
      additionalProperties: true
    _Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            prisma:
              type: boolean
              description: Indicates if the error occurred during a Prisma call
            rejectedByPolicy:
              type: boolean
              description: Indicates if the error was due to rejection by a policy
            code:
              type: string
              description: Prisma error code. Only available when "prisma" field is true.
            message:
              type: string
              description: Error message
            reason:
              type: string
              description: Detailed error reason
            zodErrors:
              type: object
              additionalProperties: true
              description: Zod validation errors if the error is due to data validation
                failure
          additionalProperties: true
    BatchPayload:
      type: object
      properties:
        count:
          type: integer
    UserCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        include:
          $ref: "#/components/schemas/UserInclude"
        data:
          $ref: "#/components/schemas/UserCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/UserCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/UserCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    UserFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        include:
          $ref: "#/components/schemas/UserInclude"
        where:
          $ref: "#/components/schemas/UserWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        include:
          $ref: "#/components/schemas/UserInclude"
        where:
          $ref: "#/components/schemas/UserWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        include:
          $ref: "#/components/schemas/UserInclude"
        where:
          $ref: "#/components/schemas/UserWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        include:
          $ref: "#/components/schemas/UserInclude"
        where:
          $ref: "#/components/schemas/UserWhereUniqueInput"
        data:
          $ref: "#/components/schemas/UserUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/UserWhereInput"
        data:
          $ref: "#/components/schemas/UserUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        include:
          $ref: "#/components/schemas/UserInclude"
        where:
          $ref: "#/components/schemas/UserWhereUniqueInput"
        create:
          $ref: "#/components/schemas/UserCreateInput"
        update:
          $ref: "#/components/schemas/UserUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        include:
          $ref: "#/components/schemas/UserInclude"
        where:
          $ref: "#/components/schemas/UserWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UserWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/UserSelect"
        where:
          $ref: "#/components/schemas/UserWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UserWhereInput"
        orderBy:
          $ref: "#/components/schemas/UserOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/UserWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UserCountAggregateInput"
        _min:
          $ref: "#/components/schemas/UserMinAggregateInput"
        _max:
          $ref: "#/components/schemas/UserMaxAggregateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    UserGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/UserWhereInput"
        orderBy:
          $ref: "#/components/schemas/UserOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/UserScalarFieldEnum"
        having:
          $ref: "#/components/schemas/UserScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/UserCountAggregateInput"
        _min:
          $ref: "#/components/schemas/UserMinAggregateInput"
        _max:
          $ref: "#/components/schemas/UserMaxAggregateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosCreateArgs:
      type: object
      required:
        - data
      properties:
        select:
          $ref: "#/components/schemas/TodosSelect"
        include:
          $ref: "#/components/schemas/TodosInclude"
        data:
          $ref: "#/components/schemas/TodosCreateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosCreateManyArgs:
      type: object
      required:
        - data
      properties:
        data:
          oneOf:
            - $ref: "#/components/schemas/TodosCreateManyInput"
            - type: array
              items:
                $ref: "#/components/schemas/TodosCreateManyInput"
        skipDuplicates:
          type: boolean
          description: Do not insert records with unique fields or ID fields that already
            exist.
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosFindUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/TodosSelect"
        include:
          $ref: "#/components/schemas/TodosInclude"
        where:
          $ref: "#/components/schemas/TodosWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosFindFirstArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/TodosSelect"
        include:
          $ref: "#/components/schemas/TodosInclude"
        where:
          $ref: "#/components/schemas/TodosWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosFindManyArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/TodosSelect"
        include:
          $ref: "#/components/schemas/TodosInclude"
        where:
          $ref: "#/components/schemas/TodosWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosUpdateArgs:
      type: object
      required:
        - where
        - data
      properties:
        select:
          $ref: "#/components/schemas/TodosSelect"
        include:
          $ref: "#/components/schemas/TodosInclude"
        where:
          $ref: "#/components/schemas/TodosWhereUniqueInput"
        data:
          $ref: "#/components/schemas/TodosUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosUpdateManyArgs:
      type: object
      required:
        - data
      properties:
        where:
          $ref: "#/components/schemas/TodosWhereInput"
        data:
          $ref: "#/components/schemas/TodosUpdateManyMutationInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosUpsertArgs:
      type: object
      required:
        - create
        - update
        - where
      properties:
        select:
          $ref: "#/components/schemas/TodosSelect"
        include:
          $ref: "#/components/schemas/TodosInclude"
        where:
          $ref: "#/components/schemas/TodosWhereUniqueInput"
        create:
          $ref: "#/components/schemas/TodosCreateInput"
        update:
          $ref: "#/components/schemas/TodosUpdateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosDeleteUniqueArgs:
      type: object
      required:
        - where
      properties:
        select:
          $ref: "#/components/schemas/TodosSelect"
        include:
          $ref: "#/components/schemas/TodosInclude"
        where:
          $ref: "#/components/schemas/TodosWhereUniqueInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosDeleteManyArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TodosWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosCountArgs:
      type: object
      properties:
        select:
          $ref: "#/components/schemas/TodosSelect"
        where:
          $ref: "#/components/schemas/TodosWhereInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosAggregateArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TodosWhereInput"
        orderBy:
          $ref: "#/components/schemas/TodosOrderByWithRelationInput"
        cursor:
          $ref: "#/components/schemas/TodosWhereUniqueInput"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/TodosCountAggregateInput"
        _min:
          $ref: "#/components/schemas/TodosMinAggregateInput"
        _max:
          $ref: "#/components/schemas/TodosMaxAggregateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
    TodosGroupByArgs:
      type: object
      properties:
        where:
          $ref: "#/components/schemas/TodosWhereInput"
        orderBy:
          $ref: "#/components/schemas/TodosOrderByWithRelationInput"
        by:
          $ref: "#/components/schemas/TodosScalarFieldEnum"
        having:
          $ref: "#/components/schemas/TodosScalarWhereWithAggregatesInput"
        take:
          type: integer
        skip:
          type: integer
        _count:
          oneOf:
            - type: boolean
            - $ref: "#/components/schemas/TodosCountAggregateInput"
        _min:
          $ref: "#/components/schemas/TodosMinAggregateInput"
        _max:
          $ref: "#/components/schemas/TodosMaxAggregateInput"
        meta:
          $ref: "#/components/schemas/_Meta"
paths:
  /user/create:
    post:
      operationId: createUser
      description: Create a new User
      tags:
        - user
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateArgs"
  /user/createMany:
    post:
      operationId: createManyUser
      description: Create several User
      tags:
        - user
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateManyArgs"
  /user/findUnique:
    get:
      operationId: findUniqueUser
      description: Find one unique User
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /user/findFirst:
    get:
      operationId: findFirstUser
      description: Find the first User matching the given condition
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /user/findMany:
    get:
      operationId: findManyUser
      description: Find a list of User
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /user/update:
    patch:
      operationId: updateUser
      description: Update a User
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateArgs"
  /user/updateMany:
    patch:
      operationId: updateManyUser
      description: Update Users matching the given condition
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateManyArgs"
  /user/upsert:
    post:
      operationId: upsertUser
      description: Upsert a User
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpsertArgs"
  /user/delete:
    delete:
      operationId: deleteUser
      description: Delete one unique User
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/User"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /user/deleteMany:
    delete:
      operationId: deleteManyUser
      description: Delete Users matching the given condition
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /user/count:
    get:
      operationId: countUser
      description: Find a list of User
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/UserCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /user/aggregate:
    get:
      operationId: aggregateUser
      description: Aggregate Users
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateUser"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /user/groupBy:
    get:
      operationId: groupByUser
      description: Group Users by fields
      tags:
        - user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /todos/create:
    post:
      operationId: createTodos
      description: Create a new Todos
      tags:
        - todos
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Todos"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodosCreateArgs"
  /todos/createMany:
    post:
      operationId: createManyTodos
      description: Create several Todos
      tags:
        - todos
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodosCreateManyArgs"
  /todos/findUnique:
    get:
      operationId: findUniqueTodos
      description: Find one unique Todos
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Todos"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodosFindUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /todos/findFirst:
    get:
      operationId: findFirstTodos
      description: Find the first Todos matching the given condition
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Todos"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodosFindFirstArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /todos/findMany:
    get:
      operationId: findManyTodos
      description: Find a list of Todos
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Todos"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodosFindManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /todos/update:
    patch:
      operationId: updateTodos
      description: Update a Todos
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Todos"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodosUpdateArgs"
  /todos/updateMany:
    patch:
      operationId: updateManyTodos
      description: Update Todoss matching the given condition
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodosUpdateManyArgs"
  /todos/upsert:
    post:
      operationId: upsertTodos
      description: Upsert a Todos
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Todos"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodosUpsertArgs"
  /todos/delete:
    delete:
      operationId: deleteTodos
      description: Delete one unique Todos
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/Todos"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodosDeleteUniqueArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /todos/deleteMany:
    delete:
      operationId: deleteManyTodos
      description: Delete Todoss matching the given condition
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/BatchPayload"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodosDeleteManyArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /todos/count:
    get:
      operationId: countTodos
      description: Find a list of Todos
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    oneOf:
                      - type: integer
                      - $ref: "#/components/schemas/TodosCountAggregateOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodosCountArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /todos/aggregate:
    get:
      operationId: aggregateTodos
      description: Aggregate Todoss
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: "#/components/schemas/AggregateTodos"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodosAggregateArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
  /todos/groupBy:
    get:
      operationId: groupByTodos
      description: Group Todoss by fields
      tags:
        - todos
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TodosGroupByOutputType"
                    description: The Prisma response data serialized with superjson
                  meta:
                    $ref: "#/components/schemas/_Meta"
                    description: The superjson serialization metadata for the "data" field
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Invalid request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/_Error"
          description: Request is unprocessable due to validation errors
      parameters:
        - name: q
          in: query
          required: true
          description: Superjson-serialized Prisma query object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodosGroupByArgs"
        - name: meta
          in: query
          description: Superjson serialization metadata for parameter "q"
          content:
            application/json:
              schema: {}
