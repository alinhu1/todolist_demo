// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
plugin openapi {
  provider = "@zenstackhq/openapi"
  output = "openapi.yaml"
  title = "My Todo API"
  version = "1.0.0"
}
plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  output = './generated/hooks'
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

generator task {
  provider = "node --import=tsx ./generator/index.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id
  name             String?
  todos            Todos[]
  sentRequests     Request[] @relation("SentRequests")
  receivedRequests Request[] @relation("ReceivedRequests")

  @@deny('all', auth() == null)
  @@deny('create', true)
  @@allow('read', true)
  @@allow('update,delete', auth() == this)
}

model Todos {
  id        String   @id @default(cuid())
  name      String   @length(min: 1, max: 100)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@deny('all', auth() == null)
  @@allow('create', auth() != null)
  @@allow('read,delete,update', auth().id == userId)
  @@allow('read',auth().id == userId ||user.receivedRequests?[requesterId == auth().id && status == 'approved'])
}

model Request {
  id           String        @id @default(cuid())
  requester    User          @relation("SentRequests", fields: [requesterId], references: [id])
  requesterId  String
  targetUser   User          @relation("ReceivedRequests", fields: [targetUserId], references: [id])
  targetUserId String
  status       RequestStatus
  message      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@deny('all', auth() == null)
  @@allow('read', auth() == requester || auth() == targetUser)
  @@allow('create', auth() == requester)
  @@allow('update', auth() == targetUser && future().status != status)
}

enum RequestStatus {
  pending
  approved
  rejected
}